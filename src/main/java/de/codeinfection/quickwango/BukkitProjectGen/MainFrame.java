package de.codeinfection.quickwango.BukkitProjectGen;

import java.util.Map;
import java.io.IOException;
import java.util.HashMap;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import static de.codeinfection.quickwango.BukkitProjectGen.BukkitProjectGen.popup;
import static de.codeinfection.quickwango.BukkitProjectGen.BukkitProjectGen.echo;


/**
 *
 * @author CodeInfection
 */
public class MainFrame extends javax.swing.JFrame {

    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        try
        {
            this.setIconImage(
                ImageIO.read(
                    ClassLoader.getSystemClassLoader().getResourceAsStream("resources/app.png")
                )
            );
        }
        catch (Throwable t)
        {
            echo(t.getLocalizedMessage());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        projectGroupId = new javax.swing.JTextField();
        projectName = new javax.swing.JTextField();
        doGenerate = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        projectUrl = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        projectDescription = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        projectAuthor = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BukkitProjectGen");
        setResizable(false);

        jLabel1.setText("GroupId: *");

        jLabel2.setText("Name: *");

        projectGroupId.setText("de.codeinfection.quickwango");
        projectGroupId.setToolTipText("<html>Only numbers, letters, underscores and dots allowed here.<br>\n<br>\nEvery segment has du start with a letter oder underscore!");

        projectName.setToolTipText("<html>Only numbers, letters and underscores allowed here.<br>\n<br>\nHas to start with a letter or underscore!");

        doGenerate.setText("Generate!");
        doGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doGenerateActionPerformed(evt);
            }
        });

        jLabel3.setText("URL:");

        projectUrl.setText("http://code-infection.de");

        jLabel4.setText("Description:");

        projectDescription.setColumns(20);
        projectDescription.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        projectDescription.setLineWrap(true);
        projectDescription.setRows(5);
        projectDescription.setTabSize(4);
        jScrollPane1.setViewportView(projectDescription);

        jLabel5.setText("Author:");

        projectAuthor.setText("Quick_Wango");

        jLabel6.setText("* Field is important");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel3)
                            .add(jLabel4)
                            .add(jLabel2)
                            .add(jLabel1)
                            .add(jLabel5))
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(projectAuthor, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                            .add(projectName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                            .add(projectUrl, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, projectGroupId, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)))
                    .add(jLabel6)
                    .add(doGenerate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(projectName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(projectGroupId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(projectAuthor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(19, 19, 19)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(projectUrl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel4)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 116, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jLabel6)
                .add(18, 18, 18)
                .add(doGenerate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void doGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doGenerateActionPerformed
        Object sender = evt.getSource();
        if (sender == doGenerate)
        {
            String name = this.projectName.getText();
            String groupId = this.projectGroupId.getText();

            Pattern nameValidator = Pattern.compile("^[a-z_][a-z0-9_]*$", Pattern.CASE_INSENSITIVE);
            Pattern groupIdValidator = Pattern.compile("^([a-z_][a-z0-9_]*\\.){2,}$", Pattern.CASE_INSENSITIVE);

            
            if (name.length() == 0)
            {
                popup("You have to specify a name!", "Failure", JOptionPane.ERROR_MESSAGE);
            }
            else if (!nameValidator.matcher(name).matches())
            {
                popup("The name must not start with a number!", "Failure", JOptionPane.ERROR_MESSAGE);
            }
            else if (name.indexOf(".") > -1)
            {
                popup("The specified name is invalid!", "Failure", JOptionPane.ERROR_MESSAGE);
            }
            else if (groupId.length() == 0)
            {
                popup("You have to specify a group ID!", "Failure", JOptionPane.ERROR_MESSAGE);
            }
            else if (!groupIdValidator.matcher(groupId + ".").matches())
            {
                popup("The given group ID is invalid!", "Failure", JOptionPane.ERROR_MESSAGE);
            }
            else
            {
                try
                {
                    Map<String, String> vars = new HashMap<String, String>();
                    vars.put("URL",             this.projectUrl.getText());
                    vars.put("DESCRIPTION",     this.projectDescription.getText());
                    vars.put("AUTHOR",          this.projectAuthor.getText());
                    
                    ProjectGenerator.Result result = ProjectGenerator.getInstance().generate(name, groupId, vars);
                    switch (result)
                    {
                        case SUCCESS:
                            popup("Project successfully generated!", "Success", JOptionPane.INFORMATION_MESSAGE);
                            break;
                        case IO_ERROR:
                            popup("The generation process failed!", "Failure", JOptionPane.ERROR_MESSAGE);
                            break;
                        case ALREADY_EXISTS:
                            popup("Project does already exist!", "Failure", JOptionPane.ERROR_MESSAGE);
                            break;
                        case PERMISSION_DENIED:
                            popup("Could not write!", "Failure", JOptionPane.ERROR_MESSAGE);
                            break;
                    }
                }
                catch (IOException e)
                {
                    popup("Failed to read the resource files!", "Failure", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_doGenerateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainFrame().setVisible(true);
            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton doGenerate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField projectAuthor;
    private javax.swing.JTextArea projectDescription;
    private javax.swing.JTextField projectGroupId;
    private javax.swing.JTextField projectName;
    private javax.swing.JTextField projectUrl;
    // End of variables declaration//GEN-END:variables

}
